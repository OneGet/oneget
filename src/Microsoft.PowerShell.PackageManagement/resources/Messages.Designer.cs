//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.PowerShell.PackageManagement.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.PowerShell.PackageManagement.Resources.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Package.
        /// </summary>
        public static string ActionInstallPackage {
            get {
                return ResourceManager.GetString("ActionInstallPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Register Package Source..
        /// </summary>
        public static string ActionRegisterPackageSource {
            get {
                return ResourceManager.GetString("ActionRegisterPackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace Package Source..
        /// </summary>
        public static string ActionReplacePackageSource {
            get {
                return ResourceManager.GetString("ActionReplacePackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Package..
        /// </summary>
        public static string ActionUninstallPackage {
            get {
                return ResourceManager.GetString("ActionUninstallPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unregister Package Source..
        /// </summary>
        public static string ActionUnregisterPackageSource {
            get {
                return ResourceManager.GetString("ActionUnregisterPackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot use the parameter AllVersions with RequiredVersion, MinimumVersion or MaximumVersion in the same command..
        /// </summary>
        public static string AllVersionsCannotBeUsedWithOtherVersionParameters {
            get {
                return ResourceManager.GetString("AllVersionsCannotBeUsedWithOtherVersionParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; may be manually downloaded from &apos;{1}&apos; and copied to &apos;{2}&apos;..
        /// </summary>
        public static string BootstrapManualAssembly {
            get {
                return ResourceManager.GetString("BootstrapManualAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} may be manually downloaded from {1} and installed..
        /// </summary>
        public static string BootstrapManualInstall {
            get {
                return ResourceManager.GetString("BootstrapManualInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}
        ///{1}.
        /// </summary>
        public static string BootstrapProvider {
            get {
                return ResourceManager.GetString("BootstrapProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider &apos;{0}&apos; requires provider &apos;{1} v{2}&apos; to continue..
        /// </summary>
        public static string BootstrapProviderProviderRequested {
            get {
                return ResourceManager.GetString("BootstrapProviderProviderRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider &apos;{0} v{1}&apos; is not installed..
        /// </summary>
        public static string BootstrapProviderUserRequested {
            get {
                return ResourceManager.GetString("BootstrapProviderUserRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; contains an installation script..
        /// </summary>
        public static string CaptionPackageContainsInstallationScript {
            get {
                return ResourceManager.GetString("CaptionPackageContainsInstallationScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; contains an uninstallation script..
        /// </summary>
        public static string CaptionPackageContainsUninstallationScript {
            get {
                return ResourceManager.GetString("CaptionPackageContainsUninstallationScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; failed to install..
        /// </summary>
        public static string CaptionPackageInstallFailure {
            get {
                return ResourceManager.GetString("CaptionPackageInstallFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package &apos;{0}&apos; comes from a package source that is not marked as trusted..
        /// </summary>
        public static string CaptionPackageNotTrusted {
            get {
                return ResourceManager.GetString("CaptionPackageNotTrusted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; failed to uninstall..
        /// </summary>
        public static string CaptionPackageUninstallFailure {
            get {
                return ResourceManager.GetString("CaptionPackageUninstallFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package(s) come(s) from a package source that is not marked as trusted..
        /// </summary>
        public static string CaptionSourceNotTrusted {
            get {
                return ResourceManager.GetString("CaptionSourceNotTrusted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Completed.
        /// </summary>
        public static string Completed {
            get {
                return ResourceManager.GetString("Completed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving a package requires either a -Path or -LiteralPath parameter..
        /// </summary>
        public static string DestinationOrLiteralPathRequired {
            get {
                return ResourceManager.GetString("DestinationOrLiteralPathRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The desintation path &apos;{0}&apos; for package &apos;{1}&apos; is invalid..
        /// </summary>
        public static string DestinationPathInvalid {
            get {
                return ResourceManager.GetString("DestinationPathInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to install, multiple packages matched &apos;{0}&apos;. {1}.
        /// </summary>
        public static string DisambiguateForInstall {
            get {
                return ResourceManager.GetString("DisambiguateForInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify an exact Name and RequiredVersion parameter..
        /// </summary>
        public static string DisambiguateForInstall_SpecifyName {
            get {
                return ResourceManager.GetString("DisambiguateForInstall_SpecifyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See Get-PackageSource for all available registered sources and try again by specifying a single Source parameter..
        /// </summary>
        public static string DisambiguateForInstall_SpecifySource {
            get {
                return ResourceManager.GetString("DisambiguateForInstall_SpecifySource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to uninstall, multiple packages matched &apos;{0}&apos;..
        /// </summary>
        public static string DisambiguateForUninstall {
            get {
                return ResourceManager.GetString("DisambiguateForUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find file &apos;{0}&apos;..
        /// </summary>
        public static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; is not recognized as a valid package..
        /// </summary>
        public static string FileNotRecognized {
            get {
                return ResourceManager.GetString("FileNotRecognized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path &apos;{0}&apos; must refer to a single file system path..
        /// </summary>
        public static string FilePathMustBeFileSystemPath {
            get {
                return ResourceManager.GetString("FilePathMustBeFileSystemPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Folder &apos;{0}&apos; cannot be found.
        /// </summary>
        public static string FolderNotFound {
            get {
                return ResourceManager.GetString("FolderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Version parameter is allowed only when a single provider name is specified as the value of the Name parameter, without any wildcard characters. The file path is not allowed with version parameter..
        /// </summary>
        public static string FullProviderFilePathVersionNotAllowed {
            get {
                return ResourceManager.GetString("FullProviderFilePathVersionNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; failed to install..
        /// </summary>
        public static string InstallationFailure {
            get {
                return ResourceManager.GetString("InstallationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed Package &apos;{0}&apos; ({1} of {2})..
        /// </summary>
        public static string InstalledPackageMultiple {
            get {
                return ResourceManager.GetString("InstalledPackageMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Package &apos;{0}&apos; ({1} of {2})..
        /// </summary>
        public static string InstallingPackageMultiple {
            get {
                return ResourceManager.GetString("InstallingPackageMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing {0} packages..
        /// </summary>
        public static string InstallingPackagesCount {
            get {
                return ResourceManager.GetString("InstallingPackagesCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Administrator rights are required to install packages in &apos;{0}&apos;. Log on to the computer with an account that has Administrator rights, and then try again, or install in &apos;{1}&apos; by adding &quot;-Scope CurrentUser&quot; to your command. You can also try running the Windows PowerShell session with elevated rights (Run as Administrator)..
        /// </summary>
        public static string InstallRequiresCurrentUserScopeParameterForNonAdminUser {
            get {
                return ResourceManager.GetString("InstallRequiresCurrentUserScopeParameterForNonAdminUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version &apos;{0}&apos; is invalid. Error: &apos;{1}&apos;..
        /// </summary>
        public static string InvalidVersion {
            get {
                return ResourceManager.GetString("InvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; matched package &apos;{2}/{3}&apos; from provider: &apos;{1}&apos;, source &apos;{4}&apos;..
        /// </summary>
        public static string MatchesMultiplePackages {
            get {
                return ResourceManager.GetString("MatchesMultiplePackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified ProviderName parameter matches multiple providers: {0}..
        /// </summary>
        public static string MatchesMultipleProviders {
            get {
                return ResourceManager.GetString("MatchesMultipleProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider &apos;{0}&apos; does not implement &apos;{1}&apos;..
        /// </summary>
        public static string MethodNotImplemented {
            get {
                return ResourceManager.GetString("MethodNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified MinimumVersion &apos;{0}&apos; is greater than the specified MaximumVersion &apos;{1}&apos;.
        /// </summary>
        public static string MinimumVersionMustBeLessThanMaximumVersion {
            get {
                return ResourceManager.GetString("MinimumVersionMustBeLessThanMaximumVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple matches found &apos;{0}&apos; for the specified file &apos;{1}&apos;..
        /// </summary>
        public static string MoreThanOneFileMatched {
            get {
                return ResourceManager.GetString("MoreThanOneFileMatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple matches found &apos;{0}&apos; for the specified folder &apos;{1}&apos;..
        /// </summary>
        public static string MoreThanOneFolderMatched {
            get {
                return ResourceManager.GetString("MoreThanOneFolderMatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version parameter is allowed only when a single module name is specified as the value of the Name parameter, without any wildcard characters..
        /// </summary>
        public static string MultipleNamesWithVersionNotAllowed {
            get {
                return ResourceManager.GetString("MultipleNamesWithVersionNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install-Package requires parameters to select a package to install..
        /// </summary>
        public static string MustSpecifyCriteria {
            get {
                return ResourceManager.GetString("MustSpecifyCriteria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either -Name or -Location must be specified to select a package source..
        /// </summary>
        public static string NameOrLocationRequired {
            get {
                return ResourceManager.GetString("NameOrLocationRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network connectivity may not be available, unable to reach remote sources..
        /// </summary>
        public static string NetworkNotAvailable {
            get {
                return ResourceManager.GetString("NetworkNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No package found matching &apos;{0}&apos;..
        /// </summary>
        public static string NoMatchesForWildcard {
            get {
                return ResourceManager.GetString("NoMatchesForWildcard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No combination of providers ({0}) match sources specified ({1})..
        /// </summary>
        public static string NoMatchForProvidersAndSources {
            get {
                return ResourceManager.GetString("NoMatchForProvidersAndSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No package found for &apos;{0}&apos;..
        /// </summary>
        public static string NoMatchFound {
            get {
                return ResourceManager.GetString("NoMatchFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No match was found for the specified search criteria and package name &apos;{0}&apos;. Try Get-PackageSource to see all available registered package sources..
        /// </summary>
        public static string NoMatchFoundForCriteria {
            get {
                return ResourceManager.GetString("NoMatchFoundForCriteria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No match was found for the specified search criteria for the provider &apos;{0}&apos;. The package provider requires &apos;PackageManagement&apos; and &apos;Provider&apos; tags. Please check if the specified package has the tags..
        /// </summary>
        public static string NoMatchFoundForProvider {
            get {
                return ResourceManager.GetString("NoMatchFoundForProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package provider &apos;{0}&apos; did not return any packages..
        /// </summary>
        public static string NoPackagesFoundForProvider {
            get {
                return ResourceManager.GetString("NoPackagesFoundForProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Implemented..
        /// </summary>
        public static string NotImplemmented {
            get {
                return ResourceManager.GetString("NotImplemmented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwriting package source &apos;{0}&apos;..
        /// </summary>
        public static string OverwritingPackageSource {
            get {
                return ResourceManager.GetString("OverwritingPackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package file &apos;{0}&apos; exists. Remove the file first or use -Force to overwrite..
        /// </summary>
        public static string PackageFileExists {
            get {
                return ResourceManager.GetString("PackageFileExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageManagement: A package is installed..
        /// </summary>
        public static string PackageInstalled {
            get {
                return ResourceManager.GetString("PackageInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; from package provider &apos;{1}&apos; requires the &apos;{2}&apos; parameter to install..
        /// </summary>
        public static string PackageInstallRequiresOption {
            get {
                return ResourceManager.GetString("PackageInstallRequiresOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageManagement: A package is saved..
        /// </summary>
        public static string PackageSaved {
            get {
                return ResourceManager.GetString("PackageSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package Source &apos;{0}&apos; exists..
        /// </summary>
        public static string PackageSourceExists {
            get {
                return ResourceManager.GetString("PackageSourceExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageManagement: A package is uninstalled..
        /// </summary>
        public static string PackageUnInstalled {
            get {
                return ResourceManager.GetString("PackageUnInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing.
        /// </summary>
        public static string Processing {
            get {
                return ResourceManager.GetString("Processing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to save the package &apos;{0}&apos;..
        /// </summary>
        public static string ProviderFailToDownloadFile {
            get {
                return ResourceManager.GetString("ProviderFailToDownloadFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported provider &apos;{0}&apos; ..
        /// </summary>
        public static string ProviderImported {
            get {
                return ResourceManager.GetString("ProviderImported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import-PackageProvider failed. Possibly the provider name is different from the package name &apos;{0}&apos;. Try Get-PackageProvider -ListAvailable to identify the associated provider name and run Import-PackageProvider&quot;..
        /// </summary>
        public static string ProviderNameDifferentFromPackageName {
            get {
                return ResourceManager.GetString("ProviderNameDifferentFromPackageName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ProviderName must be specified. Available Providers: {0}..
        /// </summary>
        public static string ProviderNameNotSpecified {
            get {
                return ResourceManager.GetString("ProviderNameNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to download the list of available providers. Check your internet connection..
        /// </summary>
        public static string ProviderSwidtagUnavailable {
            get {
                return ResourceManager.GetString("ProviderSwidtagUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Would you like PackageManagement to automatically download and install &apos;{0}&apos; now?.
        /// </summary>
        public static string QueryBootstrap {
            get {
                return ResourceManager.GetString("QueryBootstrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to continue installing packages?.
        /// </summary>
        public static string QueryContinueInstallingAfterFailing {
            get {
                return ResourceManager.GetString("QueryContinueInstallingAfterFailing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to continue uninstalling packages?.
        /// </summary>
        public static string QueryContinueUninstallingAfterFailing {
            get {
                return ResourceManager.GetString("QueryContinueUninstallingAfterFailing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to install software from &apos;{1}&apos;?.
        /// </summary>
        public static string QueryInstallUntrustedPackage {
            get {
                return ResourceManager.GetString("QueryInstallUntrustedPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should the package install script at &apos;{0}&apos; be processed?.
        /// </summary>
        public static string QueryShouldThePackageScriptAtBeProcessed {
            get {
                return ResourceManager.GetString("QueryShouldThePackageScriptAtBeProcessed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should the package uninstall script at &apos;{0}&apos; be processed?.
        /// </summary>
        public static string QueryShouldThePackageUninstallScriptAtBeProcessed {
            get {
                return ResourceManager.GetString("QueryShouldThePackageUninstallScriptAtBeProcessed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find repository with SourceLocation &apos;{0}&apos;. Use Get-PSRepository to see all available repositories..
        /// </summary>
        public static string RegisterPackageSourceRequired {
            get {
                return ResourceManager.GetString("RegisterPackageSourceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot use the RequiredVersion and either MinimumVersion or MaximumVersion in the same command. Specify only one of these parameters in your command..
        /// </summary>
        public static string RequiredWithMaxOrMinimumVersionNotAllowed {
            get {
                return ResourceManager.GetString("RequiredWithMaxOrMinimumVersionNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Package.
        /// </summary>
        public static string SavePackage {
            get {
                return ResourceManager.GetString("SavePackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error running Save-Package cmdlet: {0}..
        /// </summary>
        public static string SavePackageError {
            get {
                return ResourceManager.GetString("SavePackageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; to location &apos;{1}&apos;.
        /// </summary>
        public static string SavePackageWhatIfDescription {
            get {
                return ResourceManager.GetString("SavePackageWhatIfDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the provider &apos;{0}&apos; for searching packages..
        /// </summary>
        public static string SelectedProviders {
            get {
                return ResourceManager.GetString("SelectedProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ??? not used ???.
        /// </summary>
        public static string ShouldContinueWithUntrustedPackageSource {
            get {
                return ResourceManager.GetString("ShouldContinueWithUntrustedPackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping installed package {0} {1}..
        /// </summary>
        public static string SkippedInstalledPackage {
            get {
                return ResourceManager.GetString("SkippedInstalledPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping installed package &apos;{0}&apos; ({1} of {2})..
        /// </summary>
        public static string SkippedInstalledPackageMultiple {
            get {
                return ResourceManager.GetString("SkippedInstalledPackageMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping package provider provider &apos;{0}&apos;-- missing required option &apos;{1}&apos;..
        /// </summary>
        public static string SkippedProviderMissingRequiredOption {
            get {
                return ResourceManager.GetString("SkippedProviderMissingRequiredOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package source &apos;{0}&apos; was found in multiple providers ({1})..
        /// </summary>
        public static string SourceFoundInMultipleProviders {
            get {
                return ResourceManager.GetString("SourceFoundInMultipleProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package source &apos;{0}&apos;. Use Get-PackageSource to see all available package sources..
        /// </summary>
        public static string SourceNotFound {
            get {
                return ResourceManager.GetString("SourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package source for location &apos;{0}&apos;..
        /// </summary>
        public static string SourceNotFoundForLocation {
            get {
                return ResourceManager.GetString("SourceNotFoundForLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package source for name &apos;{0}&apos; location &apos;{1}&apos;..
        /// </summary>
        public static string SourceNotFoundForNameAndLocation {
            get {
                return ResourceManager.GetString("SourceNotFoundForNameAndLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package sources..
        /// </summary>
        public static string SourceNotFoundNoCriteria {
            get {
                return ResourceManager.GetString("SourceNotFoundNoCriteria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action with the specified provider &apos;{0}&apos; is missing one or more required parameters: {1}..
        /// </summary>
        public static string SpecifiedProviderMissingRequiredOption {
            get {
                return ResourceManager.GetString("SpecifiedProviderMissingRequiredOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify an exact -Name and -RequiredVersion..
        /// </summary>
        public static string SuggestRequiredVersion {
            get {
                return ResourceManager.GetString("SuggestRequiredVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify a single -ProviderName..
        /// </summary>
        public static string SuggestSingleProviderName {
            get {
                return ResourceManager.GetString("SuggestSingleProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify a single -Source..
        /// </summary>
        public static string SuggestSingleSource {
            get {
                return ResourceManager.GetString("SuggestSingleSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; version &apos;{1}&apos; from &apos;{2}&apos;..
        /// </summary>
        public static string TargetPackage {
            get {
                return ResourceManager.GetString("TargetPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package Source &apos;{0}&apos; ({1}) in provider &apos;{2}&apos;..
        /// </summary>
        public static string TargetPackageSource {
            get {
                return ResourceManager.GetString("TargetPackageSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &apos;{0}&apos; with version &apos;{1}&apos;..
        /// </summary>
        public static string TargetPackageVersion {
            get {
                return ResourceManager.GetString("TargetPackageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PackageManagement cannot handle &apos;{0}&apos; packages.The limit is 63..
        /// </summary>
        public static string TooManyPackages {
            get {
                return ResourceManager.GetString("TooManyPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find dependent package(s) ({0}).
        /// </summary>
        public static string UnableToFindDependencyPackage {
            get {
                return ResourceManager.GetString("UnableToFindDependencyPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package provider for package source &apos;{0}&apos;..
        /// </summary>
        public static string UnableToFindProviderForSource {
            get {
                return ResourceManager.GetString("UnableToFindProviderForSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to remove package file &apos;{0}&apos;. .
        /// </summary>
        public static string UnableToOverwrite {
            get {
                return ResourceManager.GetString("UnableToOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled Exception - Message:&apos;{0}&apos; Name:&apos;{1}&apos; Stack Trace:&apos;{2}&apos;.
        /// </summary>
        public static string UnhandledException {
            get {
                return ResourceManager.GetString("UnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package {0} failed to uninstall..
        /// </summary>
        public static string UninstallationFailure {
            get {
                return ResourceManager.GetString("UninstallationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package provider &apos;{0}&apos;..
        /// </summary>
        public static string UnknownProvider {
            get {
                return ResourceManager.GetString("UnknownProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package provider &apos;{0}&apos;. It may not be imported yet. Try &apos;Get-PackageProvider -ListAvailable&apos;..
        /// </summary>
        public static string UnknownProviderFromActivatedList {
            get {
                return ResourceManager.GetString("UnknownProviderFromActivatedList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find package providers ({0})..
        /// </summary>
        public static string UnknownProviders {
            get {
                return ResourceManager.GetString("UnknownProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User declined to install package ({0})..
        /// </summary>
        public static string UserDeclinedUntrustedPackageInstall {
            get {
                return ResourceManager.GetString("UserDeclinedUntrustedPackageInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot use the parameters RequiredVersion and either MinimumVersion or MaximumVersion in the same command..
        /// </summary>
        public static string VersionRangeAndRequiredVersionCannotBeSpecifiedTogether {
            get {
                return ResourceManager.GetString("VersionRangeAndRequiredVersionCannotBeSpecifiedTogether", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified name &apos;{0}&apos; should not be whitespaces only, please correct it and try again..
        /// </summary>
        public static string WhitespacesAreNotSupported {
            get {
                return ResourceManager.GetString("WhitespacesAreNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified name &apos;{0}&apos; should not contain any wildcard characters, please correct it and try again..
        /// </summary>
        public static string WildCardCharsAreNotSupported {
            get {
                return ResourceManager.GetString("WildCardCharsAreNotSupported", resourceCulture);
            }
        }
    }
}
