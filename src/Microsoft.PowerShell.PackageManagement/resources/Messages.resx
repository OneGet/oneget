<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="QueryContinueInstallingAfterFailing" xml:space="preserve">
    <value>Do you wish to continue installing packages?</value>
    <comment>query</comment>
  </data>
  <data name="QueryContinueUninstallingAfterFailing" xml:space="preserve">
    <value>Do you wish to continue uninstalling packages?</value>
    <comment>query</comment>
  </data>
  <data name="DestinationPathInvalid" xml:space="preserve">
    <value>The desintation path '{0}' for package '{1}' is invalid.</value>
    <comment>{0} - path
{1} - package name</comment>
  </data>
  <data name="DisambiguateForInstall" xml:space="preserve">
    <value>Unable to install, multiple packages matched '{0}'. {1}</value>
    <comment>{0} - search criteria, {1} - suggestion</comment>
  </data>
  <data name="DisambiguateForUninstall" xml:space="preserve">
    <value>Unable to uninstall, multiple packages matched '{0}'.</value>
    <comment>{0} - search criteria</comment>
  </data>
  <data name="SourceFoundInMultipleProviders" xml:space="preserve">
    <value>The package source '{0}' was found in multiple providers ({1}).</value>
    <comment>{0} package source name, {1} list of package providers</comment>
  </data>
  <data name="SkippedProviderMissingRequiredOption" xml:space="preserve">
    <value>Skipping package provider provider '{0}'-- missing required option '{1}'.</value>
    <comment>{0} - provider name, {1} - dynamic option name</comment>
  </data>
  <data name="InstallationFailure" xml:space="preserve">
    <value>Package '{0}' failed to install.</value>
    <comment>{0} -package name</comment>
  </data>
  <data name="CaptionPackageNotTrusted" xml:space="preserve">
    <value>The package '{0}' comes from a package source that is not marked as trusted.</value>
    <comment>{0} package name</comment>
  </data>
  <data name="CaptionSourceNotTrusted" xml:space="preserve">
    <value>The package(s) come(s) from a package source that is not marked as trusted.</value>
    <comment>package source not trusted</comment>
  </data>
  <data name="ActionInstallPackage" xml:space="preserve">
    <value>Install Package</value>
    <comment>action 'install package'</comment>
  </data>
  <data name="MatchesMultiplePackages" xml:space="preserve">
    <value>'{0}' matched package '{2}/{3}' from provider: '{1}', source '{4}'.</value>
    <comment>{0} search criteria {1} provider {2} package name {3} package version  {4} package sources</comment>
  </data>
  <data name="TargetPackageSource" xml:space="preserve">
    <value>Package Source '{0}' ({1}) in provider '{2}'.</value>
    <comment>{0} package source name , {1} package source location, {2} provider name</comment>
  </data>
  <data name="NoMatchFound" xml:space="preserve">
    <value>No package found for '{0}'.</value>
    <comment>{0} - search criteria</comment>
  </data>
  <data name="NoMatchFoundForCriteria" xml:space="preserve">
    <value>No match was found for the specified search criteria and package name '{0}'. Try Get-PackageSource to see all available registered package sources.</value>
    <comment>{0} - package name</comment>
  </data>
  <data name="NoPackagesFoundForProvider" xml:space="preserve">
    <value>The package provider '{0}' did not return any packages.</value>
    <comment>{0} - provider name</comment>
  </data>
  <data name="CaptionPackageContainsInstallationScript" xml:space="preserve">
    <value>Package '{0}' contains an installation script.</value>
    <comment>{0} package name</comment>
  </data>
  <data name="CaptionPackageContainsUninstallationScript" xml:space="preserve">
    <value>Package '{0}' contains an uninstallation script.</value>
    <comment>{0} package name</comment>
  </data>
  <data name="FileNotRecognized" xml:space="preserve">
    <value>File '{0}' is not recognized as a valid package.</value>
    <comment>{0} file name</comment>
  </data>
  <data name="CaptionPackageInstallFailure" xml:space="preserve">
    <value>Package '{0}' failed to install.</value>
    <comment>{0} package name</comment>
  </data>
  <data name="CaptionPackageUninstallFailure" xml:space="preserve">
    <value>Package '{0}' failed to uninstall.</value>
    <comment>{0} - package name</comment>
  </data>
  <data name="QueryShouldThePackageScriptAtBeProcessed" xml:space="preserve">
    <value>Should the package install script at '{0}' be processed?</value>
    <comment>{0} - package script location</comment>
  </data>
  <data name="QueryShouldThePackageUninstallScriptAtBeProcessed" xml:space="preserve">
    <value>Should the package uninstall script at '{0}' be processed?</value>
    <comment>{0} - package script location</comment>
  </data>
  <data name="SourceNotFound" xml:space="preserve">
    <value>Unable to find package source '{0}'. Use Get-PackageSource to see all available package sources.</value>
    <comment>{0} package source name</comment>
  </data>
  <data name="QueryInstallUntrustedPackage" xml:space="preserve">
    <value>Are you sure you want to install software from '{1}'?</value>
    <comment>{0} package name, {1} package source </comment>
  </data>
  <data name="UninstallationFailure" xml:space="preserve">
    <value>Package {0} failed to uninstall.</value>
    <comment>{0} package name</comment>
  </data>
  <data name="ActionUninstallPackage" xml:space="preserve">
    <value>Uninstall Package.</value>
    <comment>action 'uninstall package'</comment>
  </data>
  <data name="UnknownProvider" xml:space="preserve">
    <value>Unable to find package provider '{0}'.</value>
    <comment>{0} - package provider name</comment>
  </data>
  <data name="BootstrapManualAssembly" xml:space="preserve">
    <value>'{0}' may be manually downloaded from '{1}' and copied to '{2}'.</value>
    <comment>{0} -provider name, {1} url, {2} destination folder</comment>
  </data>
  <data name="BootstrapManualInstall" xml:space="preserve">
    <value>{0} may be manually downloaded from {1} and installed.</value>
    <comment>{0} -provider name, {1} url</comment>
  </data>
  <data name="BootstrapProvider" xml:space="preserve">
    <value>{0}
{1}</value>
    <comment>{0} Request Message
{1} Manual Instructions</comment>
  </data>
  <data name="BootstrapProviderProviderRequested" xml:space="preserve">
    <value>The provider '{0}' requires provider '{1} v{2}' to continue.</value>
    <comment>{0} requesting provider {1} provider name {2} provider version</comment>
  </data>
  <data name="BootstrapProviderUserRequested" xml:space="preserve">
    <value>The provider '{0} v{1}' is not installed.</value>
    <comment>{0} provider name {1} provider version</comment>
  </data>
  <data name="QueryBootstrap" xml:space="preserve">
    <value>Would you like PackageManagement to automatically download and install '{0}' now?</value>
    <comment>{0} -provider name</comment>
  </data>
  <data name="TargetPackage" xml:space="preserve">
    <value>Package '{0}' version '{1}' from '{2}'.</value>
    <comment>0- name
1 - version
2 - package source</comment>
  </data>
  <data name="TargetPackageVersion" xml:space="preserve">
    <value>Package '{0}' with version '{1}'.</value>
    <comment>0- version
	1 - package</comment>
  </data>
  <data name="ActionRegisterPackageSource" xml:space="preserve">
    <value>Register Package Source.</value>
  </data>
  <data name="ActionReplacePackageSource" xml:space="preserve">
    <value>Replace Package Source.</value>
    <comment>action 'replace package source'</comment>
  </data>
  <data name="ActionUnregisterPackageSource" xml:space="preserve">
    <value>Unregister Package Source.</value>
    <comment>action unregister package source</comment>
  </data>
  <data name="NotImplemmented" xml:space="preserve">
    <value>Not Implemented.</value>
    <comment>This should only show in DEBUG builds</comment>
  </data>
  <data name="OverwritingPackageSource" xml:space="preserve">
    <value>Overwriting package source '{0}'.</value>
    <comment>(verbose warning ) - {0} - package source name</comment>
  </data>
  <data name="PackageInstallRequiresOption" xml:space="preserve">
    <value>Package '{0}' from package provider '{1}' requires the '{2}' parameter to install.</value>
    <comment>{0} package name, {1} package provider name, {2} parameter name</comment>
  </data>
  <data name="PackageSourceExists" xml:space="preserve">
    <value>Package Source '{0}' exists.</value>
    <comment>{0} package source name</comment>
  </data>
  <data name="SourceNotFoundForLocation" xml:space="preserve">
    <value>Unable to find package source for location '{0}'.</value>
    <comment>{0} location</comment>
  </data>
  <data name="SourceNotFoundForNameAndLocation" xml:space="preserve">
    <value>Unable to find package source for name '{0}' location '{1}'.</value>
    <comment>{0} name, {1} location</comment>
  </data>
  <data name="SourceNotFoundNoCriteria" xml:space="preserve">
    <value>Unable to find package sources.</value>
  </data>
  <data name="UnableToFindProviderForSource" xml:space="preserve">
    <value>Unable to find package provider for package source '{0}'.</value>
    <comment>{0} - package source name</comment>
  </data>
  <data name="DestinationOrLiteralPathRequired" xml:space="preserve">
    <value>Saving a package requires either a -Path or -LiteralPath parameter.</value>
  </data>
  <data name="MatchesMultipleProviders" xml:space="preserve">
    <value>Specified ProviderName parameter matches multiple providers: {0}.</value>
    <comment>{0} - comma seperated list of providers matched</comment>
  </data>
  <data name="ProviderNameNotSpecified" xml:space="preserve">
    <value>ProviderName must be specified. Available Providers: {0}.</value>
    <comment>{0} - comma seperated list of available providers</comment>
  </data>
  <data name="NameOrLocationRequired" xml:space="preserve">
    <value>Either -Name or -Location must be specified to select a package source.</value>
  </data>
  <data name="NoMatchesForWildcard" xml:space="preserve">
    <value>No package found matching '{0}'.</value>
    <comment>{0} wildcard match string</comment>
  </data>
  <data name="NoMatchForProvidersAndSources" xml:space="preserve">
    <value>No combination of providers ({0}) match sources specified ({1}).</value>
    <comment>0 provider names, 1- source names</comment>
  </data>
  <data name="SavePackage" xml:space="preserve">
    <value>Save Package</value>
    <comment>action 'save package'</comment>
  </data>
  <data name="ShouldContinueWithUntrustedPackageSource" xml:space="preserve">
    <value>??? not used ???</value>
  </data>
  <data name="UserDeclinedUntrustedPackageInstall" xml:space="preserve">
    <value>User declined to install package ({0}).</value>
    <comment>provider names</comment>
  </data>
  <data name="UnknownProviders" xml:space="preserve">
    <value>Unable to find package providers ({0}).</value>
    <comment>provider names</comment>
  </data>
  <data name="PackageFileExists" xml:space="preserve">
    <value>Package file '{0}' exists. Remove the file first or use -Force to overwrite.</value>
    <comment>{0} - package filename </comment>
  </data>
  <data name="UnableToOverwrite" xml:space="preserve">
    <value>Unable to remove package file '{0}'. </value>
    <comment>{0} - package filename</comment>
  </data>
  <data name="FilePathMustBeFileSystemPath" xml:space="preserve">
    <value>The path '{0}' must refer to a single file system path.</value>
    <comment>{0} provides the path supplied by the user</comment>
  </data>
  <data name="SavePackageError" xml:space="preserve">
    <value>Error running Save-Package cmdlet: {0}.</value>
  </data>
  <data name="ProviderSwidtagUnavailable" xml:space="preserve">
    <value>Unable to download the list of available providers. Check your internet connection.</value>
  </data>
  <data name="MustSpecifyCriteria" xml:space="preserve">
    <value>Install-Package requires parameters to select a package to install.</value>
  </data>
  <data name="UnableToFindDependencyPackage" xml:space="preserve">
    <value>Unable to find dependent package(s) ({0})</value>
    <comment>{0} canonical  package id(s).</comment>
  </data>
  <data name="NetworkNotAvailable" xml:space="preserve">
    <value>Network connectivity may not be available, unable to reach remote sources.</value>
  </data>
  <data name="InstalledPackageMultiple" xml:space="preserve">
    <value>Installed Package '{0}' ({1} of {2}).</value>
  </data>
  <data name="InstallingPackageMultiple" xml:space="preserve">
    <value>Installing Package '{0}' ({1} of {2}).</value>
  </data>
  <data name="InstallingPackagesCount" xml:space="preserve">
    <value>Installing {0} packages.</value>
    <comment>package count</comment>
  </data>
  <data name="SkippedInstalledPackage" xml:space="preserve">
    <value>Skipping installed package {0} {1}.</value>
    <comment>name, version</comment>
  </data>
  <data name="SkippedInstalledPackageMultiple" xml:space="preserve">
    <value>Skipping installed package '{0}' ({1} of {2}).</value>
  </data>
  <data name="VersionRangeAndRequiredVersionCannotBeSpecifiedTogether" xml:space="preserve">
    <value>You cannot use the parameters RequiredVersion and either MinimumVersion or MaximumVersion in the same command.</value>
  </data>
  <data name="SpecifiedProviderMissingRequiredOption" xml:space="preserve">
    <value>The action with the specified provider '{0}' is missing one or more required parameters: {1}.</value>
    <comment>0 -provider name, 1- comma seperated list of required missing parameters</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>Cannot find file '{0}'.</value>
    <comment>{0} - file name or path.</comment>
  </data>
  <data name="MoreThanOneFileMatched" xml:space="preserve">
    <value>Multiple matches found '{0}' for the specified file '{1}'.</value>
    <comment>0 - matched files, 1 - file path.</comment>
  </data>
  <data name="MoreThanOneFolderMatched" xml:space="preserve">
    <value>Multiple matches found '{0}' for the specified folder '{1}'.</value>
    <comment>0 - matched folders, 1 - folder path.</comment>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>Unhandled Exception - Message:'{0}' Name:'{1}' Stack Trace:'{2}'</value>
    <comment>0 - Message, 1 - Name, 2 - stack trace.</comment>
  </data>
  <data name="MinimumVersionMustBeLessThanMaximumVersion" xml:space="preserve">
    <value>The specified MinimumVersion '{0}' is greater than the specified MaximumVersion '{1}'</value>
  </data>
  <data name="MultipleNamesWithVersionNotAllowed" xml:space="preserve">
    <value>The version parameter is allowed only when a single module name is specified as the value of the Name parameter, without any wildcard characters.</value>
  </data>
  <data name="RequiredWithMaxOrMinimumVersionNotAllowed" xml:space="preserve">
    <value>You cannot use the RequiredVersion and either MinimumVersion or MaximumVersion in the same command. Specify only one of these parameters in your command.</value>
  </data>
  <data name="FullProviderFilePathVersionNotAllowed" xml:space="preserve">
    <value>The Version parameter is allowed only when a single provider name is specified as the value of the Name parameter, without any wildcard characters. The file path is not allowed with version parameter.</value>
  </data>
  <data name="UnknownProviderFromActivatedList" xml:space="preserve">
    <value>Unable to find package provider '{0}'. It may not be imported yet. Try 'Get-PackageProvider -ListAvailable'.</value>
    <comment>{0} - provider name</comment>
  </data>
  <data name="AllVersionsCannotBeUsedWithOtherVersionParameters" xml:space="preserve">
    <value>You cannot use the parameter AllVersions with RequiredVersion, MinimumVersion or MaximumVersion in the same command.</value>
  </data>
  <data name="NoMatchFoundForProvider" xml:space="preserve">
    <value>No match was found for the specified search criteria for the provider '{0}'. The package provider requires 'PackageManagement' and 'Provider' tags. Please check if the specified package has the tags.</value>
    <comment>{0} - provider name</comment>
  </data>
  <data name="DisambiguateForInstall_SpecifyName" xml:space="preserve">
    <value>Specify an exact Name and RequiredVersion parameter.</value>
  </data>
  <data name="DisambiguateForInstall_SpecifySource" xml:space="preserve">
    <value>See Get-PackageSource for all available registered sources and try again by specifying a single Source parameter.</value>
  </data>
  <data name="RegisterPackageSourceRequired" xml:space="preserve">
    <value>Unable to find repository with SourceLocation '{0}'. Use Get-PSRepository to see all available repositories.</value>
    <comment>{1} package source</comment>
  </data>
  <data name="InvalidVersion" xml:space="preserve">
    <value>The specified version '{0}' is invalid. Error: '{1}'.</value>
    <comment>0 - version string, 1 - error message</comment>
  </data>
  <data name="SelectedProviders" xml:space="preserve">
    <value>Using the provider '{0}' for searching packages.</value>
    <comment>0 - provider name</comment>
  </data>
  <data name="ProviderFailToDownloadFile" xml:space="preserve">
    <value>Unable to save the package '{0}'.</value>
    <comment>0 - package name</comment>
  </data>
  <data name="FolderNotFound" xml:space="preserve">
    <value>Folder '{0}' cannot be found</value>
  </data>
  <data name="WildCardCharsAreNotSupported" xml:space="preserve">
    <value>The specified name '{0}' should not contain any wildcard characters, please correct it and try again.</value>
    <comment>0 - package or provider name</comment>
  </data>
  <data name="SuggestRequiredVersion" xml:space="preserve">
    <value>Please specify an exact -Name and -RequiredVersion.</value>
  </data>
  <data name="SuggestSingleProviderName" xml:space="preserve">
    <value>Please specify a single -ProviderName.</value>
  </data>
  <data name="SuggestSingleSource" xml:space="preserve">
    <value>Please specify a single -Source.</value>
  </data>
  <data name="MethodNotImplemented" xml:space="preserve">
    <value>Provider '{0}' does not implement '{1}'.</value>
    <comment>0 - provider name. 1 - method name (such as save-package)</comment>
  </data>
  <data name="InstallRequiresCurrentUserScopeParameterForNonAdminUser" xml:space="preserve">
    <value>Administrator rights are required to install packages in '{0}'. Log on to the computer with an account that has Administrator rights, and then try again, or install in '{1}' by adding "-Scope CurrentUser" to your command. You can also try running the Windows PowerShell session with elevated rights (Run as Administrator).</value>
    <comment>0 - folder, 1 - folder</comment>
  </data>
  <data name="TooManyPackages" xml:space="preserve">
    <value>PackageManagement cannot handle '{0}' packages.The limit is 63.</value>
    <comment>0 - number of packages</comment>
  </data>
  <data name="PackageInstalled" xml:space="preserve">
    <value>PackageManagement: A package is installed.</value>
    <comment>Please do not localize PackageManagement</comment>
  </data>
  <data name="PackageSaved" xml:space="preserve">
    <value>PackageManagement: A package is saved.</value>
    <comment>Please do not localize PackageManagement</comment>
  </data>
  <data name="PackageUnInstalled" xml:space="preserve">
    <value>PackageManagement: A package is uninstalled.</value>
    <comment>Please do not localize PackageManagement</comment>
  </data>
  <data name="SavePackageWhatIfDescription" xml:space="preserve">
    <value>'{0}' to location '{1}'</value>
    <comment>0 - package name, 1 - save location</comment>
  </data>
  <data name="ProviderImported" xml:space="preserve">
    <value>Imported provider '{0}' .</value>
    <comment>0 - provider name</comment>
  </data>
  <data name="ProviderNameDifferentFromPackageName" xml:space="preserve">
    <value>Import-PackageProvider failed. Possibly the provider name is different from the package name '{0}'. Try Get-PackageProvider -ListAvailable to identify the associated provider name and run Import-PackageProvider".</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="WhitespacesAreNotSupported" xml:space="preserve">
    <value>The specified name '{0}' should not be whitespaces only, please correct it and try again.</value>
    <comment>0 - package or provider name</comment>
  </data>
</root>