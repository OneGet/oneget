//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a New-StronglyTypedCsFileForResx funciton.
//     To add or remove a member, edit your .ResX file then rerun buildCoreClr.ps1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.PackageManagement.Providers.Resources {
using System;
using System.Reflection;

/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]

internal class Messages {

    private static global::System.Resources.ResourceManager resourceMan;

    private static global::System.Globalization.CultureInfo resourceCulture;

    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal Messages() {
    }

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.PackageManagement.Providers.Resources.Messages", typeof(Messages).GetTypeInfo().Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }

    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    
    /// <summary>
    ///   Looks up a localized string similar to Fail to extract and copy to '{0}'.
    /// </summary>
    internal static string FailedToExtractAndCopy {
        get {
            return ResourceManager.GetString("FailedToExtractAndCopy", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Cannot delete existing provider folder '{0}'.
    /// </summary>
    internal static string FailToDeleteExistingFolder {
        get {
            return ResourceManager.GetString("FailToDeleteExistingFolder", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Cannot extract from '{0}' to '{1}'
    /// </summary>
    internal static string FailToExtract {
        get {
            return ResourceManager.GetString("FailToExtract", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Fail to extract zip package '{0}': '{1}'
    /// </summary>
    internal static string FailToInstallZipFolder {
        get {
            return ResourceManager.GetString("FailToInstallZipFolder", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Finding the package '{0}'.
    /// </summary>
    internal static string FindingPackage {
        get {
            return ResourceManager.GetString("FindingPackage", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Installed the package '{0}' to '{1}'.
    /// </summary>
    internal static string InstalledPackage {
        get {
            return ResourceManager.GetString("InstalledPackage", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Installing the package '{0}'.
    /// </summary>
    internal static string InstallingPackage {
        get {
            return ResourceManager.GetString("InstallingPackage", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Install-PackageProvider -Source only supports '{0}' for file-based installation. '{1}' is not a supported file type. To install a PowerShell-based provider, you must install it from a PSRepository.
    /// </summary>
    internal static string InvalidFileType {
        get {
            return ResourceManager.GetString("InvalidFileType", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Provider '{0}' missing installationmedia to install.
    /// </summary>
    internal static string MissingInstallationmedia {
        get {
            return ResourceManager.GetString("MissingInstallationmedia", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to '{0}' does not contain a package provider manifest. Refer to 'Get-Help Import-PackageProvider' for guidance.
    /// </summary>
    internal static string MissingProviderManifest {
        get {
            return ResourceManager.GetString("MissingProviderManifest", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to The version is not found for the specified provider '{0}'.
    /// </summary>
    internal static string MissingVersion {
        get {
            return ResourceManager.GetString("MissingVersion", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to More than 1 dll with provider manifest exists in provider '{0}'.
    /// </summary>
    internal static string MoreThanOneDllExists {
        get {
            return ResourceManager.GetString("MoreThanOneDllExists", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Cannot find dependency packages from link '{0}'.
    /// </summary>
    internal static string NoDependencyPackageFound {
        get {
            return ResourceManager.GetString("NoDependencyPackageFound", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Link '{0}' is not using https.
    /// </summary>
    internal static string OnlyHttpsSchemeSupported {
        get {
            return ResourceManager.GetString("OnlyHttpsSchemeSupported", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Unable to bootstrap the required package provider due to problems with network connectivity. Please fix your network connection. If this is not possible, refer to 'Get-Help Install-PackageProvider' or http://go.microsoft.com/fwlink/?LinkId=626941 for guidance on installing the package provider manually.
    /// </summary>
    internal static string ProviderBootstrapFailed {
        get {
            return ResourceManager.GetString("ProviderBootstrapFailed", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Cannot download link '{0}', retrying for '{1}' more times.
    /// </summary>
    internal static string RetryDownload {
        get {
            return ResourceManager.GetString("RetryDownload", resourceCulture);
        }
    }

    /// <summary>
    ///   Looks up a localized string similar to Searching for providers in the file path {0}.
    /// </summary>
    internal static string UseLocalSource {
        get {
            return ResourceManager.GetString("UseLocalSource", resourceCulture);
        }
    }

}
}
