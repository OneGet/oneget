<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DuplicateProviderName" xml:space="preserve">
    <value>Fail to import the provider '{0}' because the provider with the same name also exists from path '{1}'.</value>
    <comment>{0} provider path {1} provider path</comment>
  </data>
  <data name="FailedToImportProvider" xml:space="preserve">
    <value>Import-PackageProvider '{0}' failed.</value>
    <comment>0-provider name or path</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File '{0}' not found.</value>
    <comment>{0} module path</comment>
  </data>
  <data name="ImportModuleFailed" xml:space="preserve">
    <value>Import-Module failed: '{0}'.</value>
    <comment>0- module name or path</comment>
  </data>
  <data name="ModuleAlreadyLoaded" xml:space="preserve">
    <value>The module '{0}' is already loaded.</value>
    <comment>{0} - module name</comment>
  </data>
  <data name="ModuleNotFound" xml:space="preserve">
    <value>Cannot find provider '{0}' under the specified path.</value>
  </data>
  <data name="PackageManagementProvidersNotFound" xml:space="preserve">
    <value>'PackageManagementProviders' key is not found in the .psd1 file under '{0}'.</value>
    <comment>{0} file path.</comment>
  </data>
  <data name="PowershellScriptFunctionReturnsNull" xml:space="preserve">
    <value>PowerShell Script '{0}' Function '{1}' returns null.</value>
    <comment>{0} script name, {1} function name</comment>
  </data>
  <data name="ProviderNameMismatch" xml:space="preserve">
    <value>Unable to find provider '{0}'. Please check if the ProviderName is set to '{1}' in '{2}'. </value>
    <comment>{0} provider name, {1} provider path, {2} provider name</comment>
  </data>
  <data name="ProviderNameIsNullOrEmpty" xml:space="preserve">
    <value>Name of the provider '{0}' is null, empty or not implemented by the provider.</value>
    <comment>0-provider name</comment>
  </data>
  <data name="RootModuleAndPackageManagementProviderNameNotMatch" xml:space="preserve">
    <value>Root module {0} does not match the packagemanagementprovider name {1}.</value>
  </data>
  <data name="ScriptStackTrace" xml:space="preserve">
    <value>Script failure at : {0}</value>
    <comment>{0} script location</comment>
  </data>
  <data name="SuccessfullyLoadedModule" xml:space="preserve">
    <value>Loaded PowerShell package provider: '[{0}]'.</value>
  </data>
  <data name="UnableToFindModuleProvider" xml:space="preserve">
    <value>Unable to find package provider '{0}' under the specified path.</value>
    <comment>{0} module name</comment>
  </data>
  <data name="UnableToFindPowerShellFunctionsFile" xml:space="preserve">
    <value>Unable to find 'PackageProviderFunctions.psm1' at '{0}'</value>
  </data>
  <data name="UnableToLoadModule" xml:space="preserve">
    <value>Cannot load module '{0}' because no valid provider found under the specified path.</value>
  </data>
  <data name="CantFindBasePowerShellModuleFolder" xml:space="preserve">
    <value>Cannot find base Powershell module folder.</value>
  </data>
</root>