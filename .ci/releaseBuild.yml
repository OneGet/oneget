name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)
trigger: none
pr: none

variables:
  - group: ESRP
  - name: ModuleName 
    value: 'PackageManagement'
  - name: BuildOutputPath
    value: '$(BuildSourcePath)\out\PackageManagement'
  - name: SignedOutputPath
    value: '$(Build.SourcesDirectory)/signed'
  - name: SourcePath
    value: 'src'
  - name: BuildSourcePath
    value: '$(Build.SourcesDirectory)/$(SourcePath)'

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance
    ref: strongNameParam

stages:
- stage: Build
  displayName: Build PackageManagement Module Package
  jobs:
  - job: BuildPkg
    displayName: Build Package
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure

    steps:
    - checkout: self
      clean: true
      submodules: true
    
    - task: NuGetAuthenticate@0
      inputs:
        nuGetServiceConnections: 'InternalPkgMgmtFeed'

    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        Set-Location $(BuildSourcePath)
        .\bootstrap.ps1
        .\build.ps1 net452
        .\build.ps1 netstandard2.0
        Get-ChildItem ./ -Recurse | Write-Host
      displayName: Build and publish artifact

    - pwsh: |
        $signSrcPath = "$(BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $outSignPath = "$(BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Create fake source and output variables for signing template and no signing
      condition: and(succeeded(), eq(variables['SkipSigning'], 'True'))

    - pwsh: |
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        
        # Created files signing directory
        $srcPath = "$(BuildOutputPath)"
        $createdSignSrcPath = "$(SignedOutputPath)\CreatedFiles"
        if (! (Test-Path -Path $createdSignSrcPath)) {
          $null = New-Item -Path $createdSignSrcPath -ItemType Directory -Verbose
        }
        Copy-Item -Path $srcPath -Dest $createdSignSrcPath -Recurse -Force -Verbose

        $signOutPath = "$(SignedOutputPath)\$(ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${createdSignSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $outSignPath = "$(SignedOutputPath)\$(ModuleName)"
        if (! (Test-Path -Path $outSignPath)) {
          $null = New-Item -Path $outSignPath -ItemType Directory -Verbose
        }
        
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set up for module created files code signing
      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

    - pwsh: |
        Write-Host "entering capture environment"
        Write-Host "signSrcPath is"
        Write-Host "$(signSrcPath)"
        Write-Host "signOutPath is"
        Write-Host "$(signOutPath)"
        
        Get-ChildItem -Path . -Recurse -Directory
      displayName: Capture environment for code signing
      condition: succeededOrFailed()

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: $(signSrcPath)
        signOutputPath: $(signOutPath)
        certificateId: "CP-233863-SN"
        pattern: |
          **\*.dll
        useMinimatch: true
        displayName: Strong name sign .dll files

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
          # Sign in-place, previous task copied the files to this folder
          buildOutputPath: $(signOutPath)
          signOutputPath: $(signOutPath)
          certificateId: "CP-230012"
          pattern: |
            **\*.dll
            **\*.psd1
            **\*.psm1
            **\*.ps1xml
            **\*.mof
          useMinimatch: true
          displayName: Authenticode Sign .dlls & PS files)
          OutputMode: NeverCopy

    - pwsh: |
        Write-Host "entering copy already signed files"
        $srcPathOLD = "$(Build.SourcesDirectory)/signed/$(ModuleName)"
        Write-Host "writing the contents of srcPathOLD"
        Get-ChildItem "$srcPathOLD" -Recurse | Write-Host

        $srcPath = "$(signOutPath)"
        Write-Host "writing the contents of srcPath"
        Get-ChildItem "$srcPath" -Recurse | Write-Host

        $signOutPath = "$(Build.SourcesDirectory)/signedOutput/$(ModuleName)"
        
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        Get-ChildItem -Path "$srcPath/PackageManagement" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest $signOutPath -Force -Verbose 
               }
               else {
                 Write-Host "Could not copy: $_"
               }
            }
        }
        
        Get-ChildItem -Path "$srcPath/PackageManagement/coreclr/netstandard2.0" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $destPath1 = "$signOutPath/PackageManagement/coreclr/netstandard2.0"
               Write-Host "destPath1 is: $destPath1"
               if (! (Test-Path $destPath1))
               {
                 $null = New-Item -Path $destPath1 -ItemType Directory -Force -Verbose
               }
               
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest ($destPath1 + $_.Name) -Force -Verbose 
               }
               else {
                 Write-Host "Could not copy: $_"
               }
            }
        }
        
        Get-ChildItem -Path "$srcPath/PackageManagement/DSCResources" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $destPath2 = "$signOutPath/PackageManagement/DSCResources"
               if (! (Test-Path $destPath2))
               {
                 $null = New-Item -Path $destPath2 -ItemType Directory -Force -Verbose
               }
               
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest ($destPath2 + $_.Name) -Force -Verbose 
               }
               else {
                 Write-Host "Could not copy: $_"
               }
            }
        }
        
        Get-ChildItem -Path "$srcPath/PackageManagement/DSCResources/MSFT_PackageManagement" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $destPath3 = "$signOutPath/PackageManagement/DSCResources/MSFT_PackageManagement"
               if (! (Test-Path $destPath3))
               {
                 $null = New-Item -Path $destPath3 -ItemType Directory -Force -Verbose
               }
              
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest ($destPath3 + $_.Name) -Force -Verbose 
               }
               else {
                 Write-Host "Could not copy: $_"
               }
            }
        }
        
        Get-ChildItem -Path "$srcPath/PackageManagement/DSCResources/MSFT_PackageManagementSource" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $destPath4 = "$signOutPath/PackageManagement/DSCResources/MSFT_PackageManagementSource"
               if (! (Test-Path $destPath4))
               {
                 $null = New-Item -Path  $destPath4 -ItemType Directory -Force -Verbose
               }
               
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest ($destPath4 + $_.Name) -Force -Verbose 
               }
               else {
                 Write-Host "Could not copy: $_"
               }
            }
        }
        
        Get-ChildItem -Path "$srcPath/PackageManagement/fullclr" | Foreach-Object {
            if ($_.Attributes -ne "Directory") {
               $destPath5 = "$signOutPath/PackageManagement/fullclr"
               if (!(Test-Path $destPath5))
               {
                 $null = New-Item -Path $destPath5 -ItemType Directory -Force -Verbose
               }
               
               $sig = Get-AuthenticodeSignature -FilePath $_.FullName
               if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
                 # Copy already signed files directly to output
                 Copy-Item -Path $_.FullName -Dest ($destPath5 + $_.Name) -Force -Verbose 
               }
               else {
                Write-Host "Could not copy: $_"
               }
            }
        }
        
        Write-Host "writing the contents of signoutpath"
        Get-ChildItem "$signOutPath" -Recurse | Write-Host

      displayName: Copy already properly signed files (.dll, .psd1, .psm1, .ps1xml, .mof)
      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

    - ${{ if ne(variables.SkipSigning, 'True') }}:
      - template: Sbom.yml@ComplianceRepo
        parameters:
          BuildDropPath: "$(Build.SourcesDirectory)/signedOutput"
          Build_Repository_Uri: 'https://github.com/oneget/oneget'
          PackageName: 'PackageManagement'
          PackageVersion: '1.4.8'

    - pwsh: |
        $signOutPath = "$(Build.SourcesDirectory)/signedOutput/$(ModuleName)"
        $srcModulePath = Resolve-Path -Path "$signOutPath"
        Write-Host "Contents of srcModulePath"
        Get-ChildItem "$srcModulePath" -Recurse | Write-Host

        Write-Host "Contents of global signOutPath"
        Get-ChildItem "$(signOutPath)" -Recurse | Write-Host

        $artifactName = "$(ModuleName)"

        $artifactDir = "$(Build.SourcesDirectory)/signedOutput"
        $nupkgArtifactDir = "$artifactDir/nupkg" 
        if (! (Test-Path -Path $nupkgArtifactDir)) {
          $null = New-Item -Path $nupkgArtifactDir -ItemType Directory
        }

        Register-PSRepository -Name "LocalRepo" -SourceLocation "$nupkgArtifactDir"
        Publish-Module -Path $srcModulePath -Repository "LocalRepo"
        $nupkgName = "nupkg"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$nupkgName;]$nupkgArtifactDir"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$artifactDir"
      displayName: Create module artifact

# Now on to the compliance stage
- stage: compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: ComplianceJob
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure

    steps:
    - checkout: self
      clean: true
      submodules: true
    - checkout: ComplianceRepo
      clean: true
    - download: current
      artifact: 'PackageManagement'
    - template: script-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)/PackageManagement/**/*.dll'
        AnalyzeSymPath: 'SRV*'
        # component-governance - the path to sources
        sourceScanPath: '$(Build.SourcesDirectory)'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        # the compliance scanning must be uploaded, which you need to request
        codeBaseName: 'PackageManagement_20220302'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- stage: Release
  displayName: Publish Package to PSGallery
  condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), eq(variables['Publish'], 'True'))
  jobs:
  - template: release.yml
